package lotto.feature;

import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class NumberTest {
    private int lottoMinValue = 1;
    private int lottoMaxValue = 45;
    private int lottoMaxNumber = 6;

    private List<Set<Integer>> userLottoNumberList;
    private Set<Integer> lottoNumberList;

    @Test
    void validLottoNumber() {
        int generatedLottoNumber = generateLottoNumber();

        assertTrue(generatedLottoNumber >= lottoMinValue && generatedLottoNumber <= lottoMaxValue);
    }

    @RepeatedTest(5000)
    void checkLottoNumberValidLength() {
        List lottoNumberList = generateManualLotto();

        int generatedLottoNumberLength = lottoNumberList.size();

        assertEquals(lottoMaxNumber, generatedLottoNumberLength);
    }

    @RepeatedTest(100)
    void checkUserLottoList() {
        int userLottoCount = 10;
        userLottoNumberList = new ArrayList<>();

        for (int i=0; i<userLottoCount; i++) {
            List lottoNumberList = generateManualLotto();

            userLottoNumberList.add(new HashSet<>(lottoNumberList));
        }

        int userLottoNumberListCount = userLottoNumberList.size();

        assertEquals(userLottoCount, userLottoNumberListCount);

        for (int i=0; i<userLottoNumberListCount; i++) {
            Set<Integer> generatedLottoNumberList = userLottoNumberList.get(i);
            int lottoCount = generatedLottoNumberList.size();

            assertEquals(lottoMaxNumber, lottoCount);
        }
    }

    @RepeatedTest(10)
    void generateAutoLottoNumber() {
        lottoNumberList = new HashSet<>();
        List<Integer> autoGeneratedLottoNumberList = new ArrayList(lottoNumberList);

        for (int i=1; i<=lottoMaxValue; i++) {
            autoGeneratedLottoNumberList.add(i);
        }

        Collections.shuffle(autoGeneratedLottoNumberList);

        List<Integer> shuffledLottoNumberList = new ArrayList<>();

        for (int i=1; i<=lottoMaxNumber; i++) {
            shuffledLottoNumberList.add(autoGeneratedLottoNumberList.get(i));
        }

        Collections.sort(shuffledLottoNumberList);

        System.out.println(shuffledLottoNumberList);

        assertEquals(lottoMaxNumber, shuffledLottoNumberList.size());
    }

    private List generateManualLotto() {
        lottoNumberList = new HashSet<>();

        while(lottoNumberList.size() < lottoMaxNumber) {
            int generatedLottoNumber = generateLottoNumber();

            lottoNumberList.add(generatedLottoNumber);
        }

        List sortedLottoNumberList = new ArrayList(lottoNumberList);

        Collections.sort(sortedLottoNumberList);

        return sortedLottoNumberList;
    }

    private int generateLottoNumber() {
        double randomNumber = (int) (Math.random() * ((lottoMaxValue - lottoMinValue) + 1)) + lottoMinValue;
        int parsedRandomNumber = (int) randomNumber;

        return parsedRandomNumber;
    }
}